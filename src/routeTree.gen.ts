/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AppRouteImport } from './routes/_app'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AppSettingsRouteImport } from './routes/_app/settings'
import { Route as AppProfileRouteImport } from './routes/_app/profile'
import { Route as AppDashboardRouteImport } from './routes/_app/dashboard'
import { Route as AppClientsRouteImport } from './routes/_app/clients'
import { Route as AppCatalogoIndexRouteImport } from './routes/_app/catalogo/index'
import { Route as AppCatalogoIdRouteImport } from './routes/_app/catalogo/$id'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AppRoute = AppRouteImport.update({
  id: '/_app',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AppSettingsRoute = AppSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => AppRoute,
} as any)
const AppProfileRoute = AppProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => AppRoute,
} as any)
const AppDashboardRoute = AppDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AppRoute,
} as any)
const AppClientsRoute = AppClientsRouteImport.update({
  id: '/clients',
  path: '/clients',
  getParentRoute: () => AppRoute,
} as any)
const AppCatalogoIndexRoute = AppCatalogoIndexRouteImport.update({
  id: '/catalogo/',
  path: '/catalogo/',
  getParentRoute: () => AppRoute,
} as any)
const AppCatalogoIdRoute = AppCatalogoIdRouteImport.update({
  id: '/catalogo/$id',
  path: '/catalogo/$id',
  getParentRoute: () => AppRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/clients': typeof AppClientsRoute
  '/dashboard': typeof AppDashboardRoute
  '/profile': typeof AppProfileRoute
  '/settings': typeof AppSettingsRoute
  '/catalogo/$id': typeof AppCatalogoIdRoute
  '/catalogo': typeof AppCatalogoIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/clients': typeof AppClientsRoute
  '/dashboard': typeof AppDashboardRoute
  '/profile': typeof AppProfileRoute
  '/settings': typeof AppSettingsRoute
  '/catalogo/$id': typeof AppCatalogoIdRoute
  '/catalogo': typeof AppCatalogoIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_app': typeof AppRouteWithChildren
  '/login': typeof LoginRoute
  '/_app/clients': typeof AppClientsRoute
  '/_app/dashboard': typeof AppDashboardRoute
  '/_app/profile': typeof AppProfileRoute
  '/_app/settings': typeof AppSettingsRoute
  '/_app/catalogo/$id': typeof AppCatalogoIdRoute
  '/_app/catalogo/': typeof AppCatalogoIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/clients'
    | '/dashboard'
    | '/profile'
    | '/settings'
    | '/catalogo/$id'
    | '/catalogo'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/clients'
    | '/dashboard'
    | '/profile'
    | '/settings'
    | '/catalogo/$id'
    | '/catalogo'
  id:
    | '__root__'
    | '/'
    | '/_app'
    | '/login'
    | '/_app/clients'
    | '/_app/dashboard'
    | '/_app/profile'
    | '/_app/settings'
    | '/_app/catalogo/$id'
    | '/_app/catalogo/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRoute: typeof AppRouteWithChildren
  LoginRoute: typeof LoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app/settings': {
      id: '/_app/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof AppSettingsRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/profile': {
      id: '/_app/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof AppProfileRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/dashboard': {
      id: '/_app/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AppDashboardRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/clients': {
      id: '/_app/clients'
      path: '/clients'
      fullPath: '/clients'
      preLoaderRoute: typeof AppClientsRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/catalogo/': {
      id: '/_app/catalogo/'
      path: '/catalogo'
      fullPath: '/catalogo'
      preLoaderRoute: typeof AppCatalogoIndexRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/catalogo/$id': {
      id: '/_app/catalogo/$id'
      path: '/catalogo/$id'
      fullPath: '/catalogo/$id'
      preLoaderRoute: typeof AppCatalogoIdRouteImport
      parentRoute: typeof AppRoute
    }
  }
}

interface AppRouteChildren {
  AppClientsRoute: typeof AppClientsRoute
  AppDashboardRoute: typeof AppDashboardRoute
  AppProfileRoute: typeof AppProfileRoute
  AppSettingsRoute: typeof AppSettingsRoute
  AppCatalogoIdRoute: typeof AppCatalogoIdRoute
  AppCatalogoIndexRoute: typeof AppCatalogoIndexRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppClientsRoute: AppClientsRoute,
  AppDashboardRoute: AppDashboardRoute,
  AppProfileRoute: AppProfileRoute,
  AppSettingsRoute: AppSettingsRoute,
  AppCatalogoIdRoute: AppCatalogoIdRoute,
  AppCatalogoIndexRoute: AppCatalogoIndexRoute,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRoute: AppRouteWithChildren,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
